count(nvl(year,0))--nvl year의 갚이 null이면 0으로대체해라
distinct 중복값을 제거
round(avg(nvl(year,0)),1) - 소숫점 첫째자리 까지 나타내고 두번째자리에서 반올림하라
max(midterm) 최고 , min(midterm) 최저





[1일차]
drop table t0517; --테이블 자체를 없애는것
delete from test where idnum='10001'           --idnum이 10001인 레코드을 지워라

create table test(
idNum NUMBER(5) not null PRIMARY KEY, 
sno number(3,1), -- 실수표현 (정수2자리, 소수 1자리) 앞의 3은 전체길이, 뒤이 1은 소숫점 1자리 100.1 는 4자리라 오류발생
 name varchar(9) --가변문자);                        -tes에 inNum을 기본값으로 설정하고 값이 중복되지않는 테이블을 만들어라


create table student(
 sno varchar2(3) ,
 sname nvarchar2(10),
 year varchar2(10),
 dept nvarchar2(10) ,
 constraint   student_sno_pk   primary  key(sno)); -- pk에 이름을 부여한것
 constraint   student_sno_pk   primary  key(sno,sname)); -- 두개의 pk부여 sno,sname 두개의 동일값있을시 에러발생 
sno와 sname두개가 모두같아야 오류발생 





insert into test (idnum) values('10001');         -- test라는 테이블에 idnum의 값을 넣어라

desc test;   -- test 테이블의 칼럼을 표시해라

select * from test;    --test의 모든값을 출력해라

select sno, sname, email from school;       -- school 테이블에서 sno, sname, email의 값을 출력해라
delete from school where sno='102';        -- school의 테이블에서 sno가102인 값을 삭제해라
update school set sname='' where sno = '101';    --school의 테이블에서 sno가 101인값의 이름을 null로 바꿔라

select * from school where sname is null; --오라클에서 null 값을 비교할때는 is를 사용
select * from school where sname is not null; --null 값이 아닌것을 출력하시오

select sno, sname, age from t0517 where sno= 'A01' or sno = 'A02'; --둘중하나 만족하는것
select sno, sname, age from t0517 where sno= 'A01' and sname = '하나'; --둘다 만족하는것
select sno, sname, age from t0517 where sno like 'A%'; -- A%로시작되는것  
select sno, sname, age from t0517 where sno like '%0%'; -- 0가들어간 모든값을 찾는것
select sno, sname, age from t0517 where sno like '_0%'; -- _0% 두번째글자가 영인것을 찾는것 
select sno, sname, age from t0517 where sno like '%리'; -- %리 마지막글자가 리인것을 찾는것

select * 
from t0517 
where sno like '%A%'
order by age asc; -- A가들어가는 서식의 나이를 오름차순으로 정렬하시오 

내림차순 desc, 오름차순 asc

/*오라클 한글 사용시 char(3) 3을 한글 한글자로 잡아야함
nchar(3) 가,나,다 세글자 사용가능
char 기본키 공백을 가지고 있는것  1,2,공백  (3)       
varchar 가변키 공백을 없애줌     1,2,없음  (3)


--fk 제약조건 다른테이블의 pk를 참조











3일차 - [Join]

select  *   from  student   (inner) join  enrol             --student 와 enrol의 공통값을 기준으로 테이블을 통합
on student.sno = enrol.sno;

select  *   from  student left outer  join  enrol        --student 와 enrol의 공통값을 기준으로 테이블을 통합후 오름차순정렬
on student.sno = enrol.sno
order  by  student.sno  asc; 

select  *   from  student left outer  join  enrol        --좌측에 잇는 stduent의 값을 기준으로 테이블을 통합후 오름차순정렬
on student.sno = enrol.sno
order  by  student.sno  asc; 


select  *   from  student right outer  join  enrol      --우측에 있는 enrol값을 기준으로 enrol에 없는 값은 null값으로 출력 테이블을 통합후 오름차순정렬
on student.sno = enrol.sno
order  by  student.sno  asc;

select  *   from  student full outer  join  enrol      --양측 모두의 값을 출력하여 테이블을 통합후 없는값은 null값으로 출력
on student.sno = enrol.sno
order  by  student.sno  asc;

select * from student s join enrol e             --별칭 s와 e를 설정 별칭 설정시 안에있는 모든값을 별칭으로 변경해주어야함
on s.sno = e.sno

select * from student inner join enrol    -- 세개의 테이블을 조인   student, enrol, course
on student.sno = enrol.sno                
join course on enrol.cno = course.cno;

select * from student s      --테이블을 추가하여 전화번호등을 조인문을 사용하여 추가할수 있음 이때 기본키의 크기값(3)은 같아야함
full outer join enrol e        --총네개의 조인문을 연결하여 full join으로 모든값을 출력
on s.sno=e.sno
right outer join course c
on c.cno = e.cno
full join juso j
on j.sno = s.sno
order by s.sno asc;


[between 과 order문]

select sno, sname, year, dept from student where year between '2' and '3' order by year asc; 
--between 앞에가 작은것 뒤에가 큰것을나타내야함 정렬중 asc를생략하면 기본이 오름차순
select sno, sname, year, dept from student year order by year desc , sno asc;
--year은 내림차순 sno는 오름차순으로 출력


[count 숫자를 세줌]

select count(*) as "학생수" from student;  -- 6 별칭 as "학생수" as는 가독성때문에 사용 (*)를 사용하는이유는 null 또한 세기위해
select count(sno) as "학생수" from student;  -- 6
select count(year) as "학생수" from student;  -- 5 null은 연산을 하지않는다는 뜻
select count(dept) as "학생수" from student;  -- 6 공백은 문자로 연산을 함
select count(nvl(year,0)) as "학생수" from student; --nvl year의 갚이 null이면 0으로대체해라
select sno, sname, nvl(year,0), dept from student;


[그룹화]

select dept, count(dept) as "학생수" from student
group by dept;             --sno를 기반으로 그룹화  같은 것끼리 묶어주는것을 그룹화라고 한다

select dept, year, count(dept) as "학생수" from student
group by dept , year;          --학년과 학과가 같은 학생들끼리 묶어준다

select distinct year from student; -- distinct 중복값을 제거하고 출력

select dept "학과명" , count(dept) "학생수" 
from student 
where dept !='전기'
group by dept 
having dept = '컴퓨터';



select MIDTERM, FINAL, (midterm + final) as "성적의 합" , (midterm + final)/2 as "평균" 
from enrol 
where sno = '300';   --값의합과 값의 평균

select sno, sum(midterm), sum(final), round(avg(midterm),1), round(avg(final),1)
from enrol 
group by sno
having sno ='300'; --그룹화를 시킨것중에 300번을 가져오는 것

select sno, sum(midterm), sum(final), round(avg(midterm),1), round(avg(final),1)
from enrol 
where sno = '300'
group by sno;  --300번만 가지고 그룹화를 시킨것



[중복제거]
select count( distinct dept ) as "학과수" from student; --학과를 중복을 제거해서 나타내라
select distinct dept, year from student; -- 중복제거는 칼럼의 젤 앞에서 사용해야함  년수와 학과명이 모두같아야 중복제거가됌

select dept , count(dept) from student group by dept having count(dept) >=2;
-- 그룹함수에대한 조건은 having을 사용









4일차 

[view문]
create view v_student_enrol_course  --view 물리적으로 연결되어 있는 가상의 테이블  조건처리가능
 as                                   --1.복잡한쿼리를 단순화할때 만듬 2.필요한것만 보여주고싶을때 3.용도: 보안성, 편리성
--[ANSI-SQL]                             1.편리성 : 조인을 이용하여 view 테이블을 만들 수 있다. 2.보안성 : 원본테이블의 부분을 이용하여 view 테이블을 만들 수 있다.
select s.sno, sname, year, s.dept, c.cno, cname, grade, midterm, final , 
(midterm + final) as "합계", (midterm + final)/2 as "평균"
from student s
join enrol e
on s.sno = e.sno
join course c
on c.cno = e.cno;

create view v_student
as
select sno, sname from student;  --뷰문을 통해서 원하는 부분만 보이도록 출력할수 있음

create view v_join1     --겹치는 컬럼의 이름을 설정해주지 않으면 생성되지않음
as
select * from student s
join enrol e
on s.sno = e.sno;


update v_join_se set sname = '하니2' where sno ='100'; -- join이 되어 있는 경우 추가와 수정은 실행 되지 않는다. 하나의 테이블의 뷰는 가능하다
delete from v_join_se where sno='100';  -- view에서 삭제 되고 enrol 원본에서도 삭제됌 view에서 삭제시 엉뚱한결과를 초래할수 있다.





[그룹화]

select MIDTERM, FINAL, (midterm + final) as "성적의 합" , (midterm + final)/2 as "평균" 
from enrol 
where sno = '300';   --값의합과 값의 평균

select sno, sum(midterm), sum(final), round(avg(midterm),1), round(avg(final),1)
from enrol 
group by sno
having sno ='300'; --그룹화를 시킨것중에 300번을 가져오는 것

select sno, sum(midterm), sum(final), round(avg(midterm),1), round(avg(final),1)
from enrol 
where sno = '300'
group by sno;  --300번만 가지고 그룹화를 시킨것




[서브 쿼리문]
select ~~~~ from ~~~~
where ~~~~ in();



1.컴퓨터과 학생들의 점수를 중간, 기말 점수에서 -1씩 진행하시오. 서브쿼리문
update enrol set midterm = midterm-1, final = final-1 
where sno in(
select sno
from student 
where dept='컴퓨터');  --서브쿼리는 insert 를 제외한 나머지문에서는 사용가능 select , update 중복되는 값을 기준으로 묶음

2. 서브쿼리를 이용하여 화일처리 과목의 중간고사평균과 기말고사 평균을 나타내시오
select avg(midterm), avg(final) 
from enrol 
where cno in(
select cno from course
where cname = '화일처리');

3. 서브쿼리를 이용하여 기말고사의 평균 성적이 85점 이상인 학생의 이름과 학과를 나타내시오
select sname, dept 
from student
where sno in(
select sno from enrol 
group by sno
having avg(final) >= 85);







5일차

[pk제약조건]

-기본값, null 값이 올수없다, 중복값이 올 수 없다.

constraint pk_user3_1 primary key (id)  -- --constrinat 제약조건의 이름을 pk_user3_1 로만들겠다.
id nchar(10) primary key,
primary key (id)

insert into user1(id,name) values('ppk','너구리');
insert into user1(id,name) values('ppk','너구리'); -- 중복값이 들어올수 없다
insert into user1(id,name) values('','너구리'); --not null null값이 들어올수 없다


constraint pk_user3_2 primary key (id, name)  --두개를 합쳐서 pk를만든다

insert into pk_user4(id,name) values('ppk','너구리1');
insert into pk_user4(id,name) values('ppk','너구리2'); 
insert into pk_user4(id,name) values('ppk','너구리1'); -- 중복 제약 조건 두개가 똑같으면 들어올수 없다
insert into pk_user4(id,name) values('ppk',''); --not null null값이 들어올수 없다



[not null 제약조건]

칼럼의 옆에다 써야함 = 값을 필수로받겠다.

create table user11(
 id nchar(10),
 name varchar(20) not null
);   --- 가능

create table user11(
 id nchar(10),
 name varchar(20),
 constraint user11_user3_1 not null (id) --불가능 not null 조건은 무조건 칼럼옆에다가 써야함 값을 필수로 받아야한다 = not null 제약조건
);              --null = 0도 무엇도아닌 모르는값

insert into user11(id,name) values('ppk','너구리'); -- 가능
insert into user11(id,name) values('ppk',''); -- 불가능 null 값은 입력불가능



[fk 제약조건]  

foreign key(id) references pk_user1(id) ---pk값을 꼭참조해야함

create table user1(
 id nchar(10),
 name varchar(20)
);

create table pk_user1(
id nchar(10) primary key,
name varchar(20)
);
desc pk_user1;


create table fk_user11(
 id nchar(10)not null,
 name varchar(20) not null,
foreign key(id) references pk_user1(id)  --user1의 id를 참조하고싶은것
); -- user1 의 id가 pk가아니어서 안된다는 오류를 출력 pk가 있는 pk_user1 값을 참조해야함


[unique 제약조건]

중복은 안되지만 null값은 가능하다
-- uniquw 제약조건에 not null값을 넣으면 pk와 같아진다 unique 제약조건은 null값을 받기위해 사용

create table uk_user1(   --유니크제약조건 중복은 안되지만 null값은 들어가진다
 id nchar(10) unique,
 name varchar(20)
 );
 
insert into uk_user1 (id,name) values('ppk','영심이');
insert into uk_user1 (id,name) values('ppk','영심이'); -- 동일값을 넣었다고 값 추가가 안됌
insert into uk_user1 (id,name) values('','영심이'); --null값은 잘들어옴

create table uk_user2(   --unique 제약조건에 not null을 넣으면 pk와 같아진다  unique 제약조건은 null값을 받기위해 사용
 id nchar(10) not null unique,
 name varchar(20) not null unique
 );


[check 제약조건]

원하는 값이 아니면 오류가 나옴

create table ck_user2(   
 id nchar(10) not null unique,
 loc varchar(20) not null check (loc in('서울','기타')) -- 서울과 기타가 아니면 오류가나옴
 );

insert into ck_user2 (id,loc) values('ppk','서울'); --가능
insert into ck_user2 (id,loc) values('ppk','경기'); --불가능


[default 제약조건]

 create table default_user2(   
 id nchar(10),
 loc varchar(20) default '서울',
 age number(3) default 21
 );

 insert into default_user2(id) values('young1'); -- ID의 값만 넣었지만 loc,age가 지정한 서울과 21살로 나옴 
값을 지정해서 넣을시 지정해서 넣은 값으로 출력





[제약조건 추가, 제거, 확인하기]
--제약조건 추가
 alter table user100
 add primary key(id); --table에 제약조건 추가하기 중복된 값이 저장되있으면 제약조건이 걸리지 않음
 
 alter table user100
 add constraint user100_pk primary key(id); --table에 제약조건 추가하기(제약조건 이름지정)
 
 --제약조건 확인
 select * from ALL_CONSTRAINTS
 where table_name='USER100'; --제약조건 걸려 있는지 확인하기 'USER100'값은무조건 대문자로 오라클내에서 값을 대문자로 저장해서 관리하기때문
 
 --제약조건 제거
 alter table user100
 drop CONSTRaINT SYS_C007128; --table에 제약조건 삭제하기 SYS_C007128는 제약조건의 이름

 --컬럼 추가하기 
alter table user100
add email varchar(50) ; 

-- 컬럼 추가하기 2
alter table user100
add age number(3) DEFAULT '17' ; --age에 17의 값을 넣은 컬럼을 추가한다

-- 컬럼 제거하기
alter table user100
drop column age;

-- 테이블 형변경하기
alter table user100
modify (id nchar(20));  --값의 크기를 키우는것은가능

alter table user100
modify (loc varchar(30));

alter table user100
modify (loc varchar(7));

alter table user100
modify (id nchar(8)); --값을 작게 바꾸는것은 불가 나머지공백은 문자로 잡혀있음 
char값은 남은값을 공백으로 저장하기떄문

 create table user200(   
 id nchar(10),
 loc varchar(20),
 age varchar(3)
 );

 alter table user200
modify (age varchar(3));  --안에 데이터가 없다면 뭐로 바꾸든 바뀜 데이터가 들어가있으면 쉽지않음

desc user200;
select * from user200; --숫자가 왼쪽에 붙어서 값이 출력이된다면 문자로지정되어 있는것

alter table user200
modify (age number(3)); --문자를 숫자로 바꾸는것은 불가능



[sequence문 자동증가]

create sequence s_table   --자동증가할수있는 값을 만들어주는 것
increment by 1 
start with 1001; --1001부터 1씩증가해라

create sequence s_table2   --자동증가할수있는 값을 만들어주는 것
increment by 3 
start with 1001;  ----1001부터 3씩증가해라



insert into t100(id,pwd) values(S_TABLE.NEXTVAL,'1234');  1001
insert into t100(id,pwd) values(S_TABLE.NEXTVAL,'1234간다라라'); --실행에 실패했다고 다음값으로 넘어가는것이 아닌 기억하고 있다 그 다음값으로 넘어감
insert into t100(id,pwd) values(S_TABLE.NEXTVAL,'4567'); 1003

두번째 값이 들어가는데 실패했지만 건너뛰고 1003부터 출력



[문자의 연결]
select 5+7 
from dual;

select '5'||'7'||'8' as "글자" 
from dual; -- ||문자를 연결해주는것 오라클만 가능 갯수에 상관없이 연결가능

select concat('5','ABC') --두개의 문자만 연결 가능 
from dual;
 
select length('한글'),lengthB('한글'),length('avcd') from dual;  
--dual 가상의 테이블을 만들어 값을출력 lengthb = byte의 크기로나타내줌

6일차

--insert ~ select 구문
insert into usertbl(userName, birthyear, addr, mobile)
select username, birthyear, addr, mobile from usertbl1;

insert into usertbl(userName, birthyear, addr, mobile)
select username, birthyear, addr, mobile from usertbl2;

insert into usertbl(userName, birthyear, addr, mobile)
select username, birthyear, addr, mobile from usertbl3;


---트리거

트리거란 테이블에 부착되어 , 테이블에 update 또는 delete 작업이
발생되면 insert 실행되는 코드를 말한다

--트리거 실행 테이블
create table TriuserTBL(
  userName nchar(3) primary key
  mobile varchar2(12),
  delDate DATE
);

--트리거 delete 문
create trigger del_userTB
after delete
on userTBL
for each row
begin
    insert into  TriuserTBL
    values(:old.userName, :old.birthyear, :old.addr, :old.mobile, sysdate());  --old 메모리가 삭제되기전에 메모리에 담고있는것
end;

--트리거 update 문
create trig0er update_userTB
after update
on userTBL
for each row
begin
    insert into  TriuserTBL
    values(:old.userName, :old.birthyear, :old.addr, :old.mobile, sysdate());  --old 메모리가 삭제되기전에 메모리에 담고있는것
end;
